import { Injectable, OnModuleInit } from '@nestjs/common';
import { Bot, Context, Keyboard, InlineKeyboard } from 'grammy';
import { ConfigService } from '@nestjs/config';
import { cityLocations, photoSessions, studioLocations } from '../photoSessions';

@Injectable()
export class TelegramService implements OnModuleInit {
  private bot: Bot<Context>;

  constructor(private configService: ConfigService) {}

  onModuleInit() {
    const telegramToken = this.configService.get<string>('API_TG_KEY');
    this.bot = new Bot<Context>(telegramToken);

    this.bot.command('start', this.handleStart);
    this.bot.on('message', this.handleMessage);
    this.bot.callbackQuery(/choose_location:(\d+)/, this.handleChooseLocation);
    this.bot.callbackQuery(/location:(.*)/, this.handleLocation);

    this.bot.start();
  }

  private async handleStart(ctx: Context) {
    const keyboard = new Keyboard();
    for (const session of photoSessions) {
      keyboard.text(session.name).row();
    }
    keyboard.resized();

    await ctx.reply(
      '–í–∞—Å –≤—ñ—Ç–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π –±–æ—Ç üì∏, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏—Å—å, —â–æ –∂ —Ç–∞–∫–µ —Ñ–æ—Ç–æ—Å–µ—Å—ñ—è, —Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∞ –∫–æ—à—Ç—É—î üí∏ —ñ —è–∫ –¥–æ –Ω–µ—ó –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏—Å—å ‚ú®.\n\n' +
      '–ù–∞—à–∞ –º–µ—Ç–∞ - –∑—Ä–æ–±–∏—Ç–∏ –≤–∞—à –¥–æ—Å–≤—ñ–¥ —è—Å–∫—Ä–∞–≤–∏–º, –∞ –≤–∞—à—ñ —Ñ–æ—Ç–æ –Ω–µ–∑–∞–±—É—Ç–Ω—ñ–º–∏! üåü\n\n' +
      '–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ñ–æ—Ç–æ—Å–µ—Å—ñ—ó –Ω–∏–∂—á–µ, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ! üòä',
      { reply_markup: keyboard },
    );
  }

  private async handleMessage(ctx: Context) {
    const sessionName = ctx.message?.text;
    const session = photoSessions.find(session => session.name === sessionName);
    if (!session) return;

    const media = session.images.map((image, index) => ({
      type: 'photo',
      media: image,
      caption: index === 0 ? session.descr : undefined,
      parse_mode: 'Markdown',
    }));

    await ctx.replyWithMediaGroup(media as any);

    const inlineKeyboard = new InlineKeyboard()
      .text('üåç –û–±—Ä–∞—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é –ø–æ –º—ñ—Å—Ç—É', 'choose_location:1')
      .text('üèò –û–±—Ä–∞—Ç–∏ —Å—Ç—É–¥—ñ—é', 'choose_location:2');

    await ctx.reply('–ë–∞–∂–∞—î—Ç–µ –æ–±—Ä–∞—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é –¥–ª—è –≤–∞—à–æ—ó —Ñ–æ—Ç–æ—Å–µ—Å—ñ—ó –ø–æ –º—ñ—Å—Ç—É –∞–±–æ –≤ —Å—Ç—É–¥—ñ—ó?üåçüèò', {
      reply_markup: inlineKeyboard,
    });
  }

  private async handleChooseLocation(ctx: Context) {
    const locationType = ctx.match?.[1];
    const locations = locationType === '1' ? cityLocations : studioLocations;

    const locationKeyboard = new InlineKeyboard();
    locations.forEach(location => {
      locationKeyboard.text(location.name, `location:${location.name}`).row();
    });

    await ctx.reply('–û–±–µ—Ä—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é:', { reply_markup: locationKeyboard });
  }

  private async handleLocation(ctx: Context) {
    const locationName = ctx.match?.[1];
    const location = [...cityLocations, ...studioLocations].find(loc => loc.name === locationName);
    if (!location) return;

    if (location.photo) {
      await ctx.replyWithPhoto(location.photo, {
        caption: location.name,
        parse_mode: 'Markdown',
      });
    }

    if (location.latitude && location.longitude) {
      await ctx.replyWithLocation(location.latitude, location.longitude);
    } else if (location.url) {
      await ctx.reply(`–ü–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ –ø—Ä–æ ${location.name}: ${location.url}`);
    }

    const inlineKeyboard = new InlineKeyboard()
      .text('üåç –û–±—Ä–∞—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é –ø–æ –º—ñ—Å—Ç—É', 'choose_location:1')
      .text('üèò –û–±—Ä–∞—Ç–∏ —Å—Ç—É–¥—ñ—é', 'choose_location:2');

    await ctx.reply('–û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –ª–æ–∫–∞—Ü—ñ—é, —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å:', {
      reply_markup: inlineKeyboard,
    });
  }

  getBot() {
    return this.bot;
  }
}